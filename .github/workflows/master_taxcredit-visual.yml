# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
name: Build and deploy Node.js app to Azure Web App - taxcredit-visual

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        run: |
          npm install
          npm run build
          
          # Check if build directory exists and has content
          if [ ! -d "build" ] || [ -z "$(ls -A build)" ]; then
            echo "::error::Build directory is empty or does not exist. Build may have failed."
            exit 1
          fi
          echo "Build completed successfully. Content verified in build directory."

      - name: Run tests (optional)
        run: echo "No tests configured. Skipping..."

      - name: Create web.config file
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                      <add input="{REQUEST_URI}" pattern="^/(api)" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <mimeMap fileExtension=".json" mimeType="application/json" />
                <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
                <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
              </staticContent>
            </system.webServer>
          </configuration>' > build/web.config

      - name: Create health endpoint for Azure App Service
        run: |
          echo "OK" > build/health
          # health.html 파일은 public 폴더에서 자동으로 build 폴더로 복사됩니다.

      - name: Create staticwebapp.config.json for SPA routing
        run: |
          echo '{
            "navigationFallback": {
              "rewrite": "/index.html",
              "exclude": ["/static/*", "/images/*", "/*.{png,jpg,gif,ico,css,js}"]
            },
            "routes": [
              {
                "route": "/health",
                "serve": "/health.html"
              },
              {
                "route": "/*",
                "serve": "/index.html",
                "statusCode": 200
              }
            ]
          }' > build/staticwebapp.config.json

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: 'bbd4460e-5bbf-4ab6-ae25-ce532a24f6ab'
          allow-no-subscriptions: true

      - name: Verify build content before deployment
        run: |
          echo "Checking build directory content before deployment..."
          find build -type f | sort
          echo "Total files in build directory: $(find build -type f | wc -l)"
          echo "Content of index.html:"
          cat build/index.html | head -20
          echo "Creating build.zip for direct deployment verification..."
          cd build && zip -r ../build.zip * && cd ..
          echo "✅ Build content verified and archived for deployment."
          echo "Verifying ZIP file contents..."
          unzip -l build.zip | head -10

      - name: Additional ZIP file structure verification
        if: always()
        run: |
          echo "Detailed ZIP file structure verification..."
          unzip -l build.zip
          echo "Checking for key files in ZIP root..."
          if unzip -l build.zip | grep -q "index.html"; then
            echo "✅ index.html found at ZIP root"
          else
            echo "⚠️ index.html not found at ZIP root"
          fi
          
          if unzip -l build.zip | grep -q "static/"; then
            echo "✅ static/ directory found at ZIP root"
          else
            echo "⚠️ static/ directory not found at ZIP root"
          fi
          
          if unzip -l build.zip | grep -q "favicon.ico"; then
            echo "✅ favicon.ico found at ZIP root"
          else
            echo "⚠️ favicon.ico not found at ZIP root"
          fi

      - name: Manual deployment using Kudu API
        run: |
          echo "Extracting credentials from publish profile..."
          # PublishProfile에서 정보 추출
          KUDU_URL=$(echo "${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}" | grep -o 'publishUrl="[^"]*"' | cut -d'"' -f2 | sed 's|:443||')
          USERNAME=$(echo "${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}" | grep -o 'userName="[^"]*"' | cut -d'"' -f2)
          PASSWORD=$(echo "${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}" | grep -o 'userPWD="[^"]*"' | cut -d'"' -f2)
          
          echo "Kudu URL: https://$KUDU_URL (Username will be masked)"
          
          echo "Preparing for ZIP deployment via Kudu API..."
          ZIP_SIZE=$(du -h build.zip | cut -f1)
          ZIP_BYTES=$(du -b build.zip | cut -f1)
          echo "ZIP file size: $ZIP_SIZE ($ZIP_BYTES bytes)"
          echo "ZIP file contents (first 10 entries):"
          unzip -l build.zip | head -10
          
          echo "===== Running ZIP deployment via Kudu API ====="
          # --fail 플래그 제거하고 더 상세한 출력 설정
          HTTP_CODE=$(curl --output response.txt --write-out "%{http_code}" --silent --show-error \
            -X POST "https://$KUDU_URL/api/zipdeploy" \
            -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/zip" \
            --data-binary @build.zip)
          
          CURL_EXIT_CODE=$?
          echo "curl exit code: $CURL_EXIT_CODE"
          echo "HTTP response code: $HTTP_CODE"
          
          echo "Response body (first 50 lines):"
          if [ -s response.txt ]; then
            cat response.txt | head -50
          else
            echo "(Empty response body)"
          fi
          
          # curl exit code 분석
          if [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "curl error code $CURL_EXIT_CODE 의미:"
            case $CURL_EXIT_CODE in
              1) echo "Unsupported protocol" ;;
              3) echo "URL malformed" ;;
              5) echo "Couldn't resolve proxy" ;;
              6) echo "Couldn't resolve host" ;;
              7) echo "Failed to connect to host" ;;
              22) echo "HTTP page not retrieved" ;;
              26) echo "Read error" ;;
              27) echo "Out of memory" ;;
              28) echo "Operation timeout" ;;
              35) echo "SSL connect error" ;;
              47) echo "Too many redirects" ;;
              51) echo "The peer certificate cannot be authenticated with known CA certificates" ;;
              52) echo "The server didn't reply anything" ;;
              53) echo "SSL crypto engine not found" ;;
              *) echo "Unknown curl error" ;;
            esac
            echo "::warning::cURL failed with exit code $CURL_EXIT_CODE"
          fi
          
          # HTTP 상태 코드 분석
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Deployment successful with HTTP status code: $HTTP_CODE"
          else
            echo "⚠️ Deployment may have failed. HTTP status code: $HTTP_CODE"
            echo "::warning::Deployment via Kudu API returned unexpected HTTP code: $HTTP_CODE"
          fi
          
          echo "Waiting for deployment to complete and files to be accessible..."
          sleep 60
          
          echo "Verifying deployment..."
          # 디렉토리 조회 명령도 개선
          LIST_CODE=$(curl --output wwwroot_listing.txt --write-out "%{http_code}" --silent --show-error \
            "https://$KUDU_URL/api/vfs/site/wwwroot/" \
            -u "$USERNAME:$PASSWORD" \
            -H "Accept: application/json")
          
          LIST_EXIT_CODE=$?
          echo "curl exit code for directory listing: $LIST_EXIT_CODE"
          echo "HTTP response code for directory listing: $LIST_CODE"
          
          if [ $LIST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Failed to list directory. curl exit code: $LIST_EXIT_CODE"
            echo "::warning::Directory listing failed with curl exit code $LIST_EXIT_CODE"
          elif [ "$LIST_CODE" -ge 200 ] && [ "$LIST_CODE" -lt 300 ]; then
            echo "✅ Successfully retrieved wwwroot directory listing"
            echo "Files in /site/wwwroot (JSON raw response, first 10 lines):"
            cat wwwroot_listing.txt | head -10
            echo "Extracted file names:"
            cat wwwroot_listing.txt | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | sort
            
            # 특정 필수 파일 확인
            if cat wwwroot_listing.txt | grep -q '"name":"index.html"'; then
              echo "✅ index.html found in wwwroot"
            else
              echo "⚠️ index.html NOT found in wwwroot"
              echo "::warning::index.html not found in wwwroot. Deployment may have failed."
            fi
            
            if cat wwwroot_listing.txt | grep -q '"name":"static"'; then
              echo "✅ static directory found in wwwroot"
            else
              echo "⚠️ static directory NOT found in wwwroot"
              echo "::warning::static directory not found in wwwroot. Deployment may have failed."
            fi
          else
            echo "⚠️ Failed to retrieve wwwroot directory listing. HTTP status code: $LIST_CODE"
            echo "Response:"
            cat wwwroot_listing.txt
            echo "::warning::Failed to verify deployment content in wwwroot. HTTP code: $LIST_CODE"
          fi

      - name: Verify deployment
        run: |
          echo "Deployment completed, waiting for 30 seconds for the app to be available..."
          sleep 30
          
          # Check if the app is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://taxcredit-visual.azurewebsites.net/health)
          echo "Health endpoint status: $HTTP_STATUS"
          
          # Additional checks for static resources
          INDEX_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://taxcredit-visual.azurewebsites.net/index.html)
          echo "Index.html status: $INDEX_STATUS"
          
          STATIC_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://taxcredit-visual.azurewebsites.net/static)
          echo "Static directory status: $STATIC_STATUS"
          
          if [ "$HTTP_STATUS" == "200" ] && [ "$INDEX_STATUS" == "200" ]; then
            echo "✅ Deployment successful! App is accessible."
          else
            echo "⚠️ App might not be fully accessible yet. Please check manually."
            echo "::warning::App deployment validation didn't fully pass. Manual verification recommended."
          fi

      - name: Deployment summary
        run: |
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** taxcredit-visual" >> $GITHUB_STEP_SUMMARY
          echo "* **Deployment time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "* **URL:** https://taxcredit-visual.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
